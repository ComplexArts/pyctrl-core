#!/usr/bin/env python

import warnings
import socketserver
import platform
import getopt, sys, signal
import importlib
import threading
import time

# from hanging_threads import start_monitoring
# monitoring_thread = start_monitoring()

import ctrl.server

def one_line_warning(message, category, filename, lineno, line=None):
    return " {}:{}: {}:{}\n".format(filename, lineno, category.__name__, message)

def brief_warning(message, category, filename, lineno, line=None):
    return "*{}\n".format(message)

def main():
    
    import argparse, sys
    import ctrl.server

    # Parse command line
    parser = argparse.ArgumentParser(
        description='ctrl_start_server (version {})'.format(ctrl.server.version()),
        add_help = False)
    parser.add_argument('-h', '--help', default=False,
                        action='store_true',
                        help='show this help message and exit')
    parser.add_argument('-m', '--module',
                        type=str, default='ctrl', 
                        help='controller module')
    parser.add_argument('-c', '--controller',
                        type=str, default='Controller',
                        help='controller class')
    parser.add_argument('-H', '--host',
                        type=str, default='localhost',
                        help='host name or ip address')
    parser.add_argument('-p', '--port',
                        type=int, default=9999,
                        help='port number')
    parser.add_argument('-v', '--verbose',
                        type=int, default=1,
                        help='level of verbosity')
    parser.add_argument('-t', '--period',
                        type=float, default=0.01,
                        help='sampling period in seconds')
                                     
    try:
        args = parser.parse_args()
    except:
        print()
        parser.print_help()
        sys.exit(0)

    # help?
    if args.help:
        parser.print_help()
        sys.exit(0)
        
    # Sampling period
    Ts = args.period

    # HOST AND PORT
    HOST = args.host
    PORT = args.port

    # verbose_level
    verbose_level = args.verbose

    # default module
    module = args.module
    ctrl_class = args.controller

    # Modify warnings
    if verbose_level > 2:
        pass # standard formating
    elif verbose_level > 1:
        # one liner
        warnings.formatwarning = one_line_warning
    else:
        # brief
        warnings.formatwarning = brief_warning

    # Create controller
    obj_class = getattr(importlib.import_module(module),
                        ctrl_class)
    controller = obj_class()

    # set period
    try:
        controller.get_source('clock','period')
        controller.set_source('clock',period = Ts)
        Ts = controller.get_source('clock','period')
    except:
        warnings.warn('Could not set period of the controller clock.')
        Ts = None
    
    ctrl.server.set_controller(controller)
    ctrl.server.verbose(verbose_level)

    # Start server

    # Create the server, binding to HOST and PORT
    socketserver.ThreadingTCPServer.allow_reuse_address = True
    server = socketserver.TCPServer((HOST, PORT), 
                                    ctrl.server.Handler)
    
    # Initiate server

    print('ctrl_start_server (version {})'.format(ctrl.server.version()))
    if verbose_level > 0:
        print('> Options:')
        print('   Hostname[port]: {}[{}]'.format(HOST, PORT))
        if Ts:
            print('  Sampling period: {}s'.format(Ts))
        else:
            print('  Sampling period: ---')
        print('    Verbose level: {}\n'.format(verbose_level))
        print(controller.info('all'))
        print('> Server started...')
        
    # run server in a separate thread
    thread = threading.Thread(target=server.serve_forever)
    thread.start()

    try:

        print("> Hit Ctrl-C or use 'ctrl_stop_server' to exit the server")
        
        # Wait forever
        thread.join()

    except KeyboardInterrupt:
        # Catch Ctrl-C
        pass
            
    finally:

        # shutdown server
        controller.stop()
        server.shutdown()
        thread.join()
            
        # say bye
        print("\n> Goodbye!")

if __name__ == "__main__":

    main()
